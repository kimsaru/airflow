FastAPI는 Python으로 웹 프레임워크로, 고성능의 API 서버를 빠르고 쉽게 만들 수 있도록 설계되었습니다. 
비동기(Asynchronous) 처리를 지원하고, 
자동 문서화 기능 등을 제공하여 개발 생산성을 크게 향상시킵니다.

라우터(router)를 main.py에서 분리하여 모듈화하면, 코드가 훨씬 더 깔끔하고 유지보수가 쉬워집니다.
라우터는 URL 경로와 처리 함수를 연결하고, 기능별로 API를 구조화할 수 있게 해주는 도구입니다.

호출하는 방법
1. 브라우저
http://127.0.0.1:8000/items
http://127.0.0.1:8000/items/1

2.curl, Postman, httpie
curl http://127.0.0.1:8000/items
3.pyhon
import requests
response = requests.get("http://127.0.0.1:8000/items/1")
print(response.json())


import requests

# PUT 요청에 보낼 데이터
data = {
    "name": "Updated Item",
    "price": 19.99,
    "in_stock": True
}

# 요청 보낼 URL
url = "http://127.0.0.1:8000/items/1"

# 요청 헤더
headers = {
    "Authorization": "Bearer mysecrettoken123",  # 예시 토큰
    "X-Custom-Header": "my-custom-value"          # 커스텀 헤더
}

# PUT 요청 보내기
response = requests.put(url, json=data, headers=headers)

# 응답 출력
print("Status Code:", response.status_code)
print("Response JSON:", response.json())

클라이언트는 요청 헤더에 Authorization: Bearer <token> 형식으로 토큰을 보냅니다.
서버는:
Authorization 헤더가 있는지 확인
"Bearer "로 시작하는지 확인
토큰 값을 추출
토큰이 유효한지 검사 (보통 JWT 디코딩 및 서명 검증)
유효하지 않으면 401/403 에러 응답
유효하면 요청을 처리

async def로 정의했지만 await을 사용하지 않으면,
함수는 비동기 함수로 인식되지만 실제로는 동기처럼 실행돼요.

Gunicorn이란?

Gunicorn은 Python용 WSGI HTTP 서버입니다.
주로 Flask, Django 같은 동기 웹 프레임워크와 함께 많이 쓰입니다.
Uvicorn(ASGI 서버)과는 조금 역할과 사용 목적이 달라요.

1. 멀티 워커 지원
gunicorn은 여러 워커 프로세스를 띄워서 멀티코어 CPU 활용 가능하게 합니다.
이를 통해 한 프로세스가 바빠도 다른 프로세스가 요청을 처리해서 동시성(concurrency) 향상.

2. 프로덕션 환경에 적합한 안정성
단순한 개발용 서버가 아닌, 운영 환경에서 검증된 서버입니다.
프로세스 모니터링, 재시작, 로깅 등 다양한 운영 기능을 지원.

3. 프레임워크 독립성 (WSGI 서버)
WSGI 규격을 준수하는 Python 웹 프레임워크는 대부분 gunicorn으로 실행 가능.
FastAPI같은 ASGI 프레임워크는 기본적으로 uvicorn을 쓰지만,
gunicorn에 uvicorn 워커를 붙여서 사용하기도 함 (gunicorn -k uvicorn.workers.UvicornWorker).

4. 부하 분산과 확장성
여러 워커로 요청을 나눠서 처리할 수 있기 때문에 부하를 분산시켜줍니다.
서버 다운 시 워커를 재시작하는 기능 등 안정성도 제공.

운영 환경에서는 gunicorn + uvicorn 워커 조합이 더 추천됩니다.

WSGI	은행 창구 직원 1명	고객(요청)을 하나씩 순서대로 처리
ASGI	은행 창구 직원 여러 명 + 자동 처리 시스템	여러 고객을 동시에 처리, 빠르고 실시간 소통 가능

실제 조합 방식

FastAPI 같은 ASGI 앱은 uvicorn으로 실행해야 하는데,
uvicorn 자체도 멀티 워커 기능이 있지만,
프로덕션 환경에서는 Gunicorn이 프로세스 관리, 로깅, 재시작 등 운영 기능을 맡고,
Gunicorn 워커(worker)로 Uvicorn 워커를 실행하는 형태로 조합해서 사용합니다.
Gunicorn은 멀티 프로세스 워커 관리용 "관리자" 역할을 하고,
Uvicorn은 실제 비동기 FastAPI 앱을 실행하는 "워커" 역할을 한다고 보면 됩니다.

gunicorn을 쓸 때, -w 4라고 하면
4개의 워커 프로세스가 생성되어 각각 독립적으로 요청 처리
각 워커는 별도의 프로세스니까 서로 메모리를 공유하지 않고, 독립적으로 동작

pm2 start uvicorn --name fastapi-app -- main:app --workers 4
이 명령어는 uvicorn 서버를 실행하면서,
4개의 워커 프로세스를 생성해 실행해요.
pm2가 이 워커 프로세스들을 관리해주는 셈입니다.
pm2의 장점
프로세스가 죽어도 자동 재시작 → 서비스 안정성 ↑
로그를 편하게 모아서 관리
여러 프로세스를 한꺼번에 관리 가능
서버 재부팅 후에도 자동으로 앱 실행하도록 설정 가능

당신의 시나리오
main.py 하나만 사용
모든 라우터를 동일하게 등록 (items, aaa 전부 포함)
대신 서버를 서로 다른 포트로 실행
클라이언트가 8001 포트로 접속하면 items, 8002로 접속하면 aaa를 이용한다고 “생각”하는 구조
즉, 라우터 분기 없이 하나의 앱을 여러 포트에서 동일하게 실행하되,
포트 단에서 어떤 API를 쓰는지는 클라이언트가 알아서 구분하는 방식이죠.
